<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>chithanh</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.13-420.vea_2f17932dd6">
      <queuingDurationMillis>1</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <jenkins.scm.api.SCMRevisionAction plugin="scm-api@631.v9143df5b_e4a_a">
      <sourceId>378f478c-1216-43a8-bdee-7bc1bea66926</sourceId>
      <revision class="com.cloudbees.jenkins.plugins.bitbucket.BitbucketGitSCMRevision" plugin="cloudbees-bitbucket-branch-source@773.v4b_9b_005b_562b_">
        <head class="com.cloudbees.jenkins.plugins.bitbucket.BranchSCMHead">
          <name>argocd</name>
          <repositoryType>GIT</repositoryType>
        </head>
        <hash>1cda172d4ca6a48930b6bea2bd3e350bc2de5864</hash>
        <message>test build
</message>
        <author>Thành Nguyễn &lt;eddypop2000@gmail.com&gt;</author>
        <date>2023-04-12 06:56:50.0 UTC</date>
      </revision>
    </jenkins.scm.api.SCMRevisionAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@629.vb_5627b_ee2104">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <jenkins.model.InterruptedBuildAction>
      <causes>
        <jenkins.model.CauseOfInterruption_-UserInterruption>
          <user>chithanh</user>
        </jenkins.model.CauseOfInterruption_-UserInterruption>
      </causes>
    </jenkins.model.InterruptedBuildAction>
  </actions>
  <queueId>13338282</queueId>
  <timestamp>1681282644382</timestamp>
  <startTime>1681282644385</startTime>
  <result>ABORTED</result>
  <duration>210739</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>ABORTED</result>
    <script>podTemplate(label: &apos;pod-with-gitversion&apos;, containers: [
    containerTemplate(name: &apos;kubectl&apos;, image: &apos;public.ecr.aws/smartlog/roffe/kubectl:v1.13.2&apos;, command: &apos;cat&apos;, ttyEnabled: true),
    containerTemplate(name: &apos;buildkit&apos;, image: &apos;moby/buildkit:v0.10.6&apos;, ttyEnabled: true, privileged: true),
    containerTemplate(name: &apos;awscli&apos;, image: &apos;public.ecr.aws/smartlog/atlassian/pipelines-awscli:1.18.190&apos;, command: &apos;cat&apos;, ttyEnabled: true),
  ],
  volumes: [
    hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;),
    configMapVolume(configMapName: &apos;docker-config&apos;, mountPath: &apos;/root/.docker&apos;),   
  ]) {
    node(&apos;common-pod&apos;) {
      SLACK_CHANNEL = &apos;C02CR8V040K&apos; // stm_sme_build_log
      commitMessage = &quot;&quot;
      try {
        SEM_VER = &apos;0.0.0&apos;
        stage(&apos;Get source code&apos;) {
          echo &apos;Getting source code...&apos;
          checkout([
            $class: &apos;GitSCM&apos;,
            branches: [[name: &apos;*/dev&apos;]],
            extensions: scm.extensions,
            userRemoteConfigs: [[
              credentialsId: scm.userRemoteConfigs[0].credentialsId,
              name: &apos;origin&apos;,
              refspec: &apos;+refs/heads/*:refs/remotes/origin/*&apos;,
              url: scm.userRemoteConfigs[0].url
            ]],
            doGenerateSubmoduleConfigurations: false
          ])
          checkout scm

          String[] parts = sh(returnStdout: true, script: &apos;git log -1 --pretty=%B&apos;).trim().split(&apos;\n&apos;)
          commitMessage = parts[0]
        }

        rootDir = pwd()
        baseDeploy = load &quot;${rootDir}/Jenkins.Base.groovy&quot;
        baseDeploy.awscli()

        if (env.BRANCH_NAME == &apos;dev&apos;) {
          envName = &apos;stage&apos;
          account_id = &apos;744004065806&apos;
          deployDeliveree = true
          DOCKERFILE = &quot;Dockerfile&quot;
          PROJECT = &quot;stm-sme&quot;
          build()
        } else if (env.BRANCH_NAME == &apos;qc&apos;) {
          envName = &apos;qc&apos;
          account_id = &apos;744004065806&apos;
          deployDeliveree = true
          DOCKERFILE = &quot;Dockerfile&quot;
          PROJECT = &quot;stm-sme&quot;
          build()
        } else if (env.BRANCH_NAME == &apos;argocd&apos;) {
          envName = &apos;stage&apos;
          account_id = &apos;744004065806&apos;
          deployDeliveree = true
          DOCKERFILE = &quot;Dockerfile&quot;
          PROJECT = &quot;stm-sme&quot;
          build()
        } else {
          echo &quot;Khong phai branch (dev|qc) nen ko lam gi ca&quot;
          error(&apos;Failed to build&apos;)
        }
      } catch (exc) {
        currentBuild.result = &apos;FAILURE&apos;
        echo &apos;I failed&apos;
        echo exc.getMessage()
      }
      finally {
        echo &apos;One way or another, I have finished&apos;
        try {
          deleteDir() /* clean up our workspace */
        } catch(err) {
          // Do nothing
        }
        if (currentBuild.result == &apos;SUCCESS&apos;) {
          echo &apos;Build successful&apos;
          slackSend channel: SLACK_CHANNEL,
            color: &apos;good&apos;,
            message: &quot;The pipeline ${currentBuild.fullDisplayName} [Nikola-Admin-Fe] v${SEM_VER} [${commitMessage}] completed successfully.&quot;
        } else if (currentBuild.result == &apos;FAILURE&apos;) {
          // echo &apos;I failed :(&apos;
          // slackSend channel: SLACK_CHANNEL,
          //   color: &apos;#c40e0e&apos;,
          //   message: &quot;Attention @here ${env.JOB_NAME} [Nikola-Admin-Fe] v${SEM_VER} #${env.BUILD_NUMBER} [${commitMessage}] has failed.&quot;
        }
      }
    }
  }

def build() {
  echo &quot;Process build for ${env.BRANCH_NAME} branch&quot;
  currentTimestamp = sh(returnStdout: true, script: &apos;date +%s&apos;).trim()
  stage(&apos;Build&apos;) {
    container(&apos;buildkit&apos;) {
      REGISTRY_URL=&quot;${account_id}.dkr.ecr.ap-southeast-1.amazonaws.com/nikola-admin-fe&quot;
      sh &quot;&quot;&quot;
      wget https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/0.6.0/linux-amd64/docker-credential-ecr-login -O /usr/local/bin/docker-credential-ecr-login
      chmod 755 /usr/local/bin/docker-credential-ecr-login
      buildctl build --frontend dockerfile.v0 --local context=. --local dockerfile=./ --opt filename=./${DOCKERFILE} --output &apos;type=image,name=${REGISTRY_URL}:${envName},push=true&apos;
      &quot;&quot;&quot;
    }
  }
  stage(&apos;Update GIT&apos;) {
    script {
        withCredentials([usernamePassword(credentialsId: &apos;cicd-bitbucket&apos;, passwordVariable: &apos;BITBUCKET_PASSWORD&apos;, usernameVariable: &apos;BITBUCKET_USERNAME&apos;)]) {
        //def encodedPassword = URLEncoder.encode(&quot;$GIT_PASSWORD&quot;,&apos;UTF-8&apos;)
        sh &quot;&quot;&quot;
        git config --global user.email jenkins@gosmartlog.com
        git config --global user.name jenkins
        rm -rf devops-deployment-${PROJECT}
        git clone https://${BITBUCKET_USERNAME}:${BITBUCKET_PASSWORD}@bitbucket.org/smartlogtms/devops-deployment-${PROJECT}.git
        cd devops-deployment-${PROJECT}
        for file in ./nikola-admin-fe/${env.BRANCH_NAME}/${gitFolder}/deploy*.yaml; do sed -i &quot;s/\\(date:\\s*\\)&apos;[^&apos;]*&apos;/\\1&apos;${currentTimestamp}&apos;/&quot; &quot;\$file&quot;;git add &quot;\$file&quot;;done
        &quot;&quot;&quot;
        if (deployDeliveree) {
            sh &quot;&quot;&quot;
            cd devops-deployment-${PROJECT}
            for file in ./nikola-admin-fe/${env.BRANCH_NAME}-deliveree/${gitFolder}/deploy*.yaml; do sed -i &quot;s/\\(date:\\s*\\)&apos;[^&apos;]*&apos;/\\1&apos;${currentTimestamp}&apos;/&quot; &quot;\$file&quot;;git add &quot;\$file&quot;;done
            &quot;&quot;&quot;
        }
        sh &quot;&quot;&quot;
        cd devops-deployment-${PROJECT}
        git commit -m &apos;Done by Jenkins Job changemanifest: ${prefixPod}:${env.BUILD_NUMBER}&apos;
        git pull --rebase https://${BITBUCKET_USERNAME}:${BITBUCKET_PASSWORD}@bitbucket.org/smartlogtms/devops-deployment-${PROJECT}.git
        git push https://${BITBUCKET_USERNAME}:${BITBUCKET_PASSWORD}@bitbucket.org/smartlogtms/devops-deployment-${PROJECT}.git HEAD:refs/heads/master
        &quot;&quot;&quot;
        }
    }  
  }
  currentBuild.result = &apos;SUCCESS&apos;
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="concurrent-hash-map">
      <entry>
        <string>flowNode</string>
        <long>51064698</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>266630492</long>
      </entry>
      <entry>
        <string>run</string>
        <long>93660577</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>168116142</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>22299503</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>9</iota>
    <head>1:9</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>