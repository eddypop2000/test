<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1189.va_d37a_e9e4eda_">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.1.6.2">
      <queuingDurationMillis>1</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <jenkins.scm.api.SCMRevisionAction plugin="scm-api@608.vfa_f971c5a_a_e9">
      <sourceId>4e92d50b-d52e-4ee0-a989-c1bfb2e50dcf</sourceId>
      <revision class="com.cloudbees.jenkins.plugins.bitbucket.BitbucketGitSCMRevision" plugin="cloudbees-bitbucket-branch-source@773.v4b_9b_005b_562b_">
        <head class="com.cloudbees.jenkins.plugins.bitbucket.BranchSCMHead">
          <name>production</name>
          <repositoryType>GIT</repositoryType>
        </head>
        <hash>8689d4d5afeeacc728a65cca680abe82782fb735</hash>
        <message>Merged in add/migration-update-invoice-item (pull request #1086)</message>
        <author>Hồ Minh Tiến &lt;tien.ho@gosmartlog.com&gt;</author>
        <date>2022-08-23 10:49:49.0 UTC</date>
      </revision>
    </jenkins.scm.api.SCMRevisionAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@593.va_a_fc25d520e9">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder plugin="credentials@1139.veb_9579fca_33b_">
      <boundCredentials class="concurrent-hash-map"/>
    </com.cloudbees.plugins.credentials.builds.CredentialsParameterBinder>
    <hudson.plugins.git.util.BuildData plugin="git@4.11.3">
      <buildsByBranchName>
        <entry>
          <string>production</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>8689d4d5afeeacc728a65cca680abe82782fb735</sha1>
              <branches class="singleton-set">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>production</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>10</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://x-token-auth:{CVvEOGoKSIaYfRVGku-4A_pIVKlQznJ2UjaWQsM-aIjqkAQ1p9sKJuyC5U5ApYjRTUqi0BnHSEOSdyfOCXRhDcOu}@bitbucket.org/smartlogtms/smartlog-ecosystem.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@400.v6b_89a_1317c9a_">
      <revisionStates>
        <entry>
          <string>git https://x-token-auth@bitbucket.org/smartlogtms/smartlog-ecosystem.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <com.cloudbees.jenkins.plugins.bitbucket.FirstCheckoutCompletedInvisibleAction plugin="cloudbees-bitbucket-branch-source@773.v4b_9b_005b_562b_"/>
    <hudson.plugins.git.util.BuildData plugin="git@4.11.3">
      <buildsByBranchName>
        <entry>
          <string>production</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.11.0">
              <sha1>8689d4d5afeeacc728a65cca680abe82782fb735</sha1>
              <branches class="singleton-set">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>production</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>10</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://x-token-auth:{WAk-oC_ZNV5HBISLmlFKc7OmfLK8dUtomnA7iy-boW8o71y42x94NSkv3iSeQJsl5yPNgTx5lhgDysTwV7GHdrcxnA==}@bitbucket.org/smartlogtms/smartlog-ecosystem.git</string>
      </remoteUrls>
      <index>2</index>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2725.v7b_c717eb_12ce">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
  </actions>
  <queueId>5447357</queueId>
  <timestamp>1661319707920</timestamp>
  <startTime>1661319707924</startTime>
  <result>SUCCESS</result>
  <duration>204397</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>podTemplate(label: &apos;pod-with-gitversion&apos;, containers: [
    containerTemplate(name: &apos;docker&apos;, image: &apos;public.ecr.aws/smartlog/docker:19.03.8&apos;, ttyEnabled: true, command: &apos;cat&apos;),
    containerTemplate(name: &apos;kubectl&apos;, image: &apos;public.ecr.aws/smartlog/roffe/kubectl:v1.13.2&apos;, command: &apos;cat&apos;, ttyEnabled: true),
    containerTemplate(name: &apos;awscli&apos;, image: &apos;public.ecr.aws/smartlog/atlassian/pipelines-awscli:1.18.190&apos;, command: &apos;cat&apos;, ttyEnabled: true),
    containerTemplate(name: &apos;gitversion&apos;, image: &apos;public.ecr.aws/smartlog/gittools/gitversion:5.3.5-linux-alpine.3.10-x64-netcoreapp3.1&apos;, command: &apos;cat&apos;, ttyEnabled: true),
  ],
  volumes: [
    hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;),
  ]) {
  node(&apos;pod-with-gitversion&apos;) {
    def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
    if (!isStartedByUser) return

    isDeploy = false

    isBuildCosService = true

    successBuild = 0
    totalBuild = 0

    commitMessage = &apos;Manual Trigger Build Cos Service&apos;
    try {
      SEM_VER = &apos;0.0.0&apos;
      stage(&apos;Get source code&apos;) {
        echo &apos;Getting source code...&apos;
        checkout([
          $class: &apos;GitSCM&apos;,
          branches: [[name: &apos;*/dev&apos;]],
          extensions: scm.extensions,
          userRemoteConfigs: [[
            credentialsId: scm.userRemoteConfigs[0].credentialsId,
            name: &apos;origin&apos;,
            refspec: &apos;+refs/heads/*:refs/remotes/origin/*&apos;,
            url: scm.userRemoteConfigs[0].url
          ]],
          doGenerateSubmoduleConfigurations: false
        ])

        checkout scm

        String[] parts = sh(returnStdout: true, script: &apos;git log -1 --pretty=%B&apos;).trim().split(&apos;\n&apos;)
        commitMessage = commitMessage + &quot; (&quot; + parts[0] + &quot;)&quot;

        isDeploy = isDeploy || isBuildCosService
        if (isBuildCosService) { totalBuild++ }
      }

      rootDir = pwd()
      baseDeploy = load &quot;${rootDir}/Jenkins.Base.groovy&quot;
      deploy = load &quot;${rootDir}/Jenkins.Build.groovy&quot;
      deploy.init(baseDeploy)
      baseDeploy.awscli()
      if (env.BRANCH_NAME == &apos;dev&apos; &amp;&amp; isDeploy) {
        tagEnv = &apos;stage&apos;
        longEnv = &apos;Staging&apos;
        build()
      } else if (env.BRANCH_NAME == &apos;production&apos; &amp;&amp; isDeploy) {
        tagEnv = &apos;prod&apos;
        longEnv = &apos;Production&apos;
        build()
      } else if (!isDeploy) {
        echo &apos;NO BUILD&apos;
      } else {
        echo &apos;Khong phai branch production || dev nen ko lam gi ca&apos;
        error(&apos;Failed to build&apos;)
      }
    } catch (exc) {
      currentBuild.result = &apos;FAILURE&apos;
      echo &apos;I failed&apos;
      echo exc.getMessage()
    } finally {
      echo &apos;One way or another, I have finished&apos;
      try {
        deleteDir() /* clean up our workspace */
      } catch (err) {
        // Do nothing
      }
      if (isDeploy != true) {
        /* Do nothing */
      } else if (currentBuild.result == &apos;SUCCESS&apos;) {
        echo &apos;Build successful&apos;
        // slackSend channel: &apos;cma-no-boss&apos;,
        //   color: &apos;good&apos;,
        //   message: &quot;The pipeline ${currentBuild.fullDisplayName} completed successfully.&quot;
      } else if (currentBuild.result == &apos;FAILURE&apos;) {
        echo &apos;I failed :(&apos;
        slackSend channel: &apos;cma-no-boss&apos;,
            color: &apos;#c40e0e&apos;,
            message: &quot;Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} [${commitMessage}] has failed.&quot;
        }
    }
  }
}

def build() {
  echo &quot;Process build for ${env.BRANCH_NAME} branch&quot;
  baseDeploy.generateVersion()

  deploy.buildCosService(isBuildCosService)

  if (isBuildCosService) {
    successBuild++
    slackSend channel: &apos;cma-no-boss&apos;,
        color: &apos;good&apos;,
        message: &quot;The pipeline ${currentBuild.fullDisplayName}[Cos-Be] v.${SEM_VER} [${commitMessage}] ${successBuild}/${totalBuild} completed successfully.&quot;
  }

  currentBuild.result = &apos;SUCCESS&apos;
}
</script>
    <loadedScripts class="map">
      <entry>
        <string>Script1</string>
        <string>/* groovylint-disable LineLength */
def awscli(running = true) {
    if (running) {
        container(&apos;awscli&apos;) {
            DOCKER_LOGIN = sh (
                script: &apos;aws ecr get-login --no-include-email --region ap-southeast-1&apos;,
                returnStdout: true
            ).trim()
        }
    }
}

def generateVersion(running = true) {
    if (running) {
        container(&apos;gitversion&apos;) {
            SEM_VER = sh (
                script: &apos;/tools/dotnet-gitversion . /showvariable SemVer&apos;,
                returnStdout: true
            ).trim()
            echo &quot;SemVer: ${SEM_VER}&quot;
        }
    }
}

def loadS3File(source, dest, running = true) {
    if (running) {
        container(&apos;awscli&apos;) {
            sh &quot;&quot;&quot;aws s3 cp ${source} ${dest}&quot;&quot;&quot;
        }
    }
}

def buildDocker(running = true) {
    if (running) {
        container(&apos;docker&apos;) {
            REGISTRY_URL = &quot;&quot;&quot;744004065806.dkr.ecr.ap-southeast-1.amazonaws.com/${prefixPod}:${tagEnv}&quot;&quot;&quot;
            sh &quot;&quot;&quot;
                ls -la
                docker build -f ${repoPath}Dockerfile.${tagEnv} --build-arg version=${SEM_VER} --network=host -t ${REGISTRY_URL} --pull=true .
                ${DOCKER_LOGIN}
                docker push ${REGISTRY_URL}
            &quot;&quot;&quot;
        }
    }
}

def deployToK8s(running = true) {
    if (running) {
        container(&apos;kubectl&apos;) {
            sh &quot;&quot;&quot;
                kubectl apply -f ${repoPath}deploy.${tagEnv}.yml
                kubectl patch deployment ${prefixPod}-${tagEnv} -p &quot;{\\\&quot;spec\\\&quot;:{\\\&quot;template\\\&quot;:{\\\&quot;metadata\\\&quot;:{\\\&quot;labels\\\&quot;:{\\\&quot;date\\\&quot;:\\\&quot;`date +&apos;%s&apos;`\\\&quot;}}}}}&quot; -n ${namespace}
                kubectl rollout status deployment ${prefixPod}-${tagEnv} -n ${namespace}
            &quot;&quot;&quot;
        }
    }
}
return this
</string>
      </entry>
      <entry>
        <string>Script2</string>
        <string>/* groovylint-disable LineLength */
import groovy.transform.Field

@Field private Base = null

def init(base) {
    Base = base
}

def buildAuthFe(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;modules/IdentityServer/smartlog-auth-fe/&apos;
    prefixPod = &apos;eco-auth-fe&apos;

    stage(&quot;Build Auth Fe&quot;) {
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildAuthBe(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;modules/IdentityServer/smartlog-auth-be/Smartlog.Auth.HttpApi.Host/&apos;
    prefixPod = &apos;eco-auth-be&apos;

    stage(&quot;Build Auth Be&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/auth/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildAuthApiBe(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;modules/IdentityServer/smartlog-auth-be/Smartlog.Auth.HttpApi.Host/&apos;
    prefixPod = &apos;eco-auth-api-be&apos;

    stage(&quot;Build Auth Api Be&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/auth/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        // Base.deployToK8s(running)
        stage(&quot;Deploy to k8s ${prefixPod}&quot;) {
            if (running) {
                container(&apos;kubectl&apos;) {
                    sh &quot;&quot;&quot;
                        kubectl apply -f ${repoPath}deploy-api.${tagEnv}.yml
                        kubectl patch deployment ${prefixPod}-${tagEnv} -p &quot;{\\\&quot;spec\\\&quot;:{\\\&quot;template\\\&quot;:{\\\&quot;metadata\\\&quot;:{\\\&quot;labels\\\&quot;:{\\\&quot;date\\\&quot;:\\\&quot;`date +&apos;%s&apos;`\\\&quot;}}}}}&quot; -n ${namespace}
                        kubectl rollout status deployment ${prefixPod}-${tagEnv} -n ${namespace}
                    &quot;&quot;&quot;
                }
            }
        }
    }
}

def buildAuthWorker(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;modules/IdentityServer/smartlog-auth-be/Smartlog.Auth.Worker/&apos;
    prefixPod = &apos;eco-auth-worker&apos;

    stage(&quot;Build Auth Worker&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/auth-worker/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildSocketService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/Smartlog.SocketService/&apos;
    prefixPod = &apos;eco-socket-be&apos;

    stage(&quot;Build Socket Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/socket-service/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildNotificationService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/Notification/Smartlog.Notification.API/&apos;
    prefixPod = &apos;eco-notification-be&apos;

    stage(&quot;Build Notification Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/notification-service/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildLocationService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/LocationService/Smartlog.LocationService.API/&apos;
    prefixPod = &apos;eco-location-be&apos;

    stage(&quot;Build Location Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/location-service/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildAuditLogService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/Smartlog.AuditLog.API/&apos;
    prefixPod = &apos;eco-audit-log-be&apos;

    stage(&quot;Build Audit Log Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/audit-log/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildAdministrationService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/Administration/Smartlog.Administration.API/&apos;
    prefixPod = &apos;eco-admin-be&apos;

    stage(&quot;Build Administration Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/admin-service/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildAppGateway(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Gateway/Smartlog.AppGateway/&apos;
    prefixPod = &apos;eco-app-gateway-be&apos;

    stage(&quot;Build App Gateway&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/app-gateway/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildSocialService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/SocialService/Smartlog.SocialService.Api/&apos;
    prefixPod = &apos;eco-social-be&apos;

    stage(&quot;Build Social Service&quot;) {
        Base.loadS3File(&quot;s3://smartlog-build-config/stx/ecosystem/social-service/appsettings.${tagEnv}.json&quot;, &quot;${repoPath}appsettings.${longEnv}.json&quot;, running)
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildCosService(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/COS/Smartlog.CosService.API/&apos;
    prefixPod = &apos;eco-cos-be&apos;

    stage(&quot;Build Cos Service&quot;) {
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

def buildTransportExchangeBe(running = true) {
    namespace = &apos;eco-system&apos;
    repoPath = &apos;src/Services/TransportExchange/Smartlog.TransportExchange.API/&apos;
    prefixPod = &apos;eco-stx-be&apos;

    stage(&quot;Build Transport Exchange Be&quot;) {
        Base.buildDocker(running)
        Base.deployToK8s(running)
    }
}

return this
</string>
      </entry>
    </loadedScripts>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="concurrent-hash-map">
      <entry>
        <string>flowNode</string>
        <long>272089467</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>265494768</long>
      </entry>
      <entry>
        <string>run</string>
        <long>5354557197</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>233158913</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>548512801</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>58</iota>
    <head>1:58</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.11.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <name>origin</name>
            <refspec>+refs/heads/*:refs/remotes/origin/*</refspec>
            <url>https://x-token-auth:{CVvEOGoKSIaYfRVGku-4A_pIVKlQznJ2UjaWQsM-aIjqkAQ1p9sKJuyC5U5ApYjRTUqi0BnHSEOSdyfOCXRhDcOu}@bitbucket.org/smartlogtms/smartlog-ecosystem.git</url>
            <credentialsId>f1011a6a-b720-4819-b875-826292740ef0</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/dev</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <jenkins.plugins.git.GitSCMSourceDefaults>
            <includeTags>false</includeTags>
          </jenkins.plugins.git.GitSCMSourceDefaults>
          <hudson.plugins.git.extensions.impl.BuildChooserSetting>
            <buildChooser class="jenkins.plugins.git.AbstractGitSCMSource$SpecificRevisionBuildChooser">
              <revision reference="../../../../../../../actions/hudson.plugins.git.util.BuildData/buildsByBranchName/entry/hudson.plugins.git.util.Build/marked"/>
            </buildChooser>
          </hudson.plugins.git.extensions.impl.BuildChooserSetting>
        </extensions>
      </scm>
      <node>pod-with-gitversion-d1rt0-0j5z0</node>
      <workspace>/home/jenkins/agent/workspace/stem-manual-build-cos_production</workspace>
      <changelogFile>/var/jenkins_home/jobs/eco-system-manual-build-cos/branches/production/builds/10/changelog8149257736991515003.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.11.3">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <name>origin</name>
            <refspec>+refs/heads/production:refs/remotes/origin/production</refspec>
            <url>https://x-token-auth:{WAk-oC_ZNV5HBISLmlFKc7OmfLK8dUtomnA7iy-boW8o71y42x94NSkv3iSeQJsl5yPNgTx5lhgDysTwV7GHdrcxnA==}@bitbucket.org/smartlogtms/smartlog-ecosystem.git</url>
            <credentialsId>f1011a6a-b720-4819-b875-826292740ef0</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches class="singleton-list">
          <hudson.plugins.git.BranchSpec>
            <name>production</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <browser class="hudson.plugins.git.browser.BitbucketWeb">
          <url>https://bitbucket.org/smartlogtms/smartlog-ecosystem</url>
        </browser>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <jenkins.plugins.git.GitSCMSourceDefaults>
            <includeTags>false</includeTags>
          </jenkins.plugins.git.GitSCMSourceDefaults>
          <hudson.plugins.git.extensions.impl.BuildChooserSetting>
            <buildChooser class="jenkins.plugins.git.AbstractGitSCMSource$SpecificRevisionBuildChooser">
              <revision reference="../../../../../../../actions/hudson.plugins.git.util.BuildData[2]/buildsByBranchName/entry/hudson.plugins.git.util.Build/marked"/>
            </buildChooser>
          </hudson.plugins.git.extensions.impl.BuildChooserSetting>
        </extensions>
      </scm>
      <node>pod-with-gitversion-d1rt0-0j5z0</node>
      <workspace>/home/jenkins/agent/workspace/stem-manual-build-cos_production</workspace>
      <changelogFile>/var/jenkins_home/jobs/eco-system-manual-build-cos/branches/production/builds/10/changelog14687430975477149520.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>