<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.40">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <jenkins.branch.BranchEventCause plugin="branch-api@2.6.3">
            <timestamp>1628573700603</timestamp>
            <origin>192.168.117.100 â‡’ http://jenkins-smartlog.danghung.xyz/bitbucket-scmsource-hook/notify</origin>
          </jenkins.branch.BranchEventCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.0.2.7">
      <queuingDurationMillis>5287</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>5285</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <jenkins.scm.api.SCMRevisionAction plugin="scm-api@2.6.4">
      <sourceId>6af6bc3f-c113-4f83-a750-cc8cf1bbfa12</sourceId>
      <revision class="com.cloudbees.jenkins.plugins.bitbucket.BitbucketGitSCMRevision" plugin="cloudbees-bitbucket-branch-source@2.9.5">
        <head class="com.cloudbees.jenkins.plugins.bitbucket.BranchSCMHead">
          <name>feature/performance-test</name>
          <repositoryType>GIT</repositoryType>
        </head>
        <hash>858eb221d2af055923ea59b53abaeb28382c3db5</hash>
        <message>Set max thread
</message>
        <author>Khoa Nguyen &lt;khoa.nguyen@gosmartlog.com&gt;</author>
        <date>2021-08-10 05:34:51.0 UTC</date>
      </revision>
    </jenkins.scm.api.SCMRevisionAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.18">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.0.2.7">
      <queuingDurationMillis>8645</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>8644</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>194</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>481809</queueId>
  <timestamp>1628573731109</timestamp>
  <startTime>1628573731113</startTime>
  <result>SUCCESS</result>
  <duration>14313</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>podTemplate(label: &apos;pod-with-gitversion&apos;, containers: [
    containerTemplate(name: &apos;docker&apos;, image: &apos;public.ecr.aws/smartlog/docker:19.03.8&apos;, ttyEnabled: true, command: &apos;cat&apos;),
    containerTemplate(name: &apos;kubectl&apos;, image: &apos;public.ecr.aws/smartlog/roffe/kubectl:v1.13.2&apos;, command: &apos;cat&apos;, ttyEnabled: true),
    containerTemplate(name: &apos;awscli&apos;, image: &apos;public.ecr.aws/smartlog/atlassian/pipelines-awscli:1.18.190&apos;, command: &apos;cat&apos;, ttyEnabled: true),
    containerTemplate(name: &apos;gitversion&apos;, image: &apos;public.ecr.aws/smartlog/gittools/gitversion:5.3.5-linux-alpine.3.10-x64-netcoreapp3.1&apos;, command: &apos;cat&apos;, ttyEnabled: true),
  ],
  volumes: [
    hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;),
  ]) {
    node(&apos;pod-with-gitversion&apos;) {
      def isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
      if (!isStartedByUser) return

      isDeploy = true
      isBuildFe = true

      successBuild = 0
      totalBuild = 1

      commitMessage = &quot;Manual Trigger Build Fe&quot;
      try {
        SEM_VER = &apos;0.0.0&apos;
        stage(&apos;Get source code&apos;) {
          echo &apos;Getting source code...&apos;
          checkout([
            $class: &apos;GitSCM&apos;,
            branches: [[name: &apos;*/dev&apos;]],
            extensions: scm.extensions,
            userRemoteConfigs: [[
              credentialsId: scm.userRemoteConfigs[0].credentialsId,
              name: &apos;origin&apos;,
              refspec: &apos;+refs/heads/*:refs/remotes/origin/*&apos;,
              url: scm.userRemoteConfigs[0].url
            ]],
            doGenerateSubmoduleConfigurations: false
          ])

          checkout scm

          String[] parts = sh(returnStdout: true, script: &apos;git log -1 --pretty=%B&apos;).trim().split(&apos;\n&apos;)
          commitMessage = commitMessage + &quot; (&quot; + parts[0] + &quot;)&quot;
        }
        if (env.BRANCH_NAME == &apos;feature/performance-test&apos; &amp;&amp; isDeploy) {
          echo &quot;Process build for ${env.BRANCH_NAME} branch&quot;
          stage(&apos;Build docker &amp;&amp; Deploy to k8s&apos;) {
            container(&apos;gitversion&apos;) {
              SEM_VER = sh (
                script: &apos;/tools/dotnet-gitversion . /showvariable SemVer&apos;,
                returnStdout: true
              ).trim()
              echo &quot;SemVer: ${SEM_VER}&quot;
            }
            if (isBuildFe){
              slackSend channel: &apos;project_stm_2_5&apos;,
                color: &apos;good&apos;,
                message: &quot;Start build ${currentBuild.fullDisplayName}[stm_2_5-Fe] v.${SEM_VER} [${commitMessage}] ${successBuild}/${totalBuild}.&quot;
              container(&apos;awscli&apos;) {
                sh &apos;aws s3 cp s3://smartlog-build-config/stm/config-stm-fe.performance.js Smartlog.Stm.Web/wwwroot/config.js&apos;
                sh &apos;aws s3 cp s3://smartlog-build-config/stm/deploy.fe.performance.yml deploy.fe.performance.yml&apos;
                DOCKER_LOGIN = sh (
                  script: &apos;aws ecr get-login --no-include-email --region ap-southeast-1&apos;,
                  returnStdout: true
                ).trim()
              }
              container(&apos;docker&apos;) {
                REGISTRY_URL=&quot;744004065806.dkr.ecr.ap-southeast-1.amazonaws.com/stm-eco:fe-performance&quot;
                sh &quot;&quot;&quot;
                ls -la
                docker build -f Dockerfile.fe.performance --build-arg version=${SEM_VER} --network=host -t ${REGISTRY_URL} --pull=true .
                ${DOCKER_LOGIN}
                docker push ${REGISTRY_URL}
                &quot;&quot;&quot;
              }
              container(&apos;kubectl&apos;) {
                sh &quot;&quot;&quot;
                kubectl apply -f deploy.fe.performance.yml
                kubectl patch deployment stm-eco-fe-performance -p &quot;{\\\&quot;spec\\\&quot;:{\\\&quot;template\\\&quot;:{\\\&quot;metadata\\\&quot;:{\\\&quot;labels\\\&quot;:{\\\&quot;date\\\&quot;:\\\&quot;`date +&apos;%s&apos;`\\\&quot;}}}}}&quot; -n stm
                kubectl rollout status deployment stm-eco-fe-performance -n stm
                &quot;&quot;&quot;
              }
              successBuild++
              slackSend channel: &apos;project_stm_2_5&apos;,
                color: &apos;good&apos;,
                message: &quot;The pipeline ${currentBuild.fullDisplayName}[stm_2_5-Fe] v.${SEM_VER} [${commitMessage}] ${successBuild}/${totalBuild} completed successfully.&quot;
            }
          }
          currentBuild.result = &apos;SUCCESS&apos;
        }
      } catch (exc) {
        currentBuild.result = &apos;FAILURE&apos;
        echo &apos;I failed&apos;
        echo exc.getMessage()
      }
      finally {
        echo &apos;One way or another, I have finished&apos;
        try {
          deleteDir() /* clean up our workspace */
        } catch(err) {
          // Do nothing
        }
        if (isDeploy != true) {
          /* Do nothing */
        } else if (currentBuild.result == &apos;SUCCESS&apos;) {
          echo &apos;Build successful&apos;
          // slackSend channel: &apos;project_stm_2_5&apos;,
          //   color: &apos;good&apos;,
          //   message: &quot;The pipeline ${currentBuild.fullDisplayName} completed successfully.&quot;
        } else if (currentBuild.result == &apos;FAILURE&apos;) {
          echo &apos;I failed :(&apos;
          if (env.BRANCH_NAME == &apos;staging&apos; || env.BRANCH_NAME == &apos;master&apos;){
            slackSend channel: &apos;smartlog-stm-v2_5-bugs-tracking&apos;,
            color: &apos;#c40e0e&apos;,
            message: &quot;Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} [${commitMessage}] has failed.&quot;
          } else {
            slackSend channel: &apos;project_stm_2_5&apos;,
            color: &apos;#c40e0e&apos;,
            message: &quot;Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} [${commitMessage}] has failed.&quot;
          }
        }
      }
    }
  }
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>34780564</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>26931843</long>
      </entry>
      <entry>
        <string>run</string>
        <long>66083885</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>40551305</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>6522508</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>11</iota>
    <head>1:11</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>